version: "1.1"
name: Create Teacher
env:
  host: localhost:3000
  TOKEN: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2ODk0NTRiMzgwMGQwZDg0YTA0NTg3NGYiLCJ1c2VybmFtZSI6ImtpbWFuZyIsInJvbGUiOiJBZG1pbiIsImlhdCI6MTc1NTg0NjQ1OCwiZXhwIjoxNzU1ODg5NjU4fQ.PQ9kbejU4QE_bWc2pu18ScH9ApYeHxN2bse6OKjsk8k"
config:
  loadTest:
    phases:
      - duration: 2
        arrivalRate: 20 # Requests per 1 second, 2 request
      - duration: 10
        arrivalRate: 2 # 2 requests per 1 second, 20 requests
tests:
  create-teacher:
    testdata:
      file: test.csv
    steps:
      - name: Login
        http:
          url: http://${{env.host}}/api/auth/login
          method: POST
          check:
            status: /^20/
          json:
            username: ${{testdata.username}}
            password: ${{testdata.password}}
          captures:
            accessToken:
              jsonpath: $.accessToken
      - name: POST user
        http:
          url: http://${{env.host}}/api/teachers
          method: POST
          auth:
            bearer:
              token: ${{captures.accessToken}}
          json:
            name: ${{ person.fullName | fake }}
            yearsOfExperience: '${{ number.int | fake:{"min": 1, "max": 50} }}'
            subject: ${{ commerce.department | fake }}
            # course: ["${{ database.mongodb.ObjectId | fake }}"]
          check:
            status: /^20/
  create-teacher-fail:
    testdata:
      file: test.csv
    steps:
      - name: Login
        http:
          url: http://${{env.host}}/api/auth/login
          method: POST
          check:
            status: /^20/
          json:
            username: ${{testdata.username}}
            password: ${{testdata.password}}
          captures:
            accessToken:
              jsonpath: $.accessToken
      - name: POST user bad data
        http:
          url: http://${{env.host}}/api/teachers
          method: POST
          auth:
            bearer:
              token: ${{captures.accessToken}}
          json:
            name: '${{ number.int | fake:{"min": 1, "max": 50} }}'
            yearsOfExperience: ${{ person.fullName | fake }}
            subject: 1223
            course: ["not-a-valid-id"]
          check:
            status: /^40/
  create-teacher-no-body:
    testdata:
      file: test.csv
    steps:
      - name: Login
        http:
          url: http://${{env.host}}/api/auth/login
          method: POST
          check:
            status: /^20/
          json:
            username: ${{testdata.username}}
            password: ${{testdata.password}}
          captures:
            accessToken:
              jsonpath: $.accessToken
      - name: POST user no body
        http:
          url: http://${{env.host}}/api/teachers
          method: POST
          auth:
            bearer:
              token: ${{captures.accessToken}}
          check:
            status: /^40/
